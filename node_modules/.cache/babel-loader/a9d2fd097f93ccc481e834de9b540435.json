{"ast":null,"code":"var _jsxFileName = \"/home/parth/Documents/Food-Detect/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport ndarray from 'ndarray';\nimport ops from 'ndarray-ops';\nimport { food101topK } from './utils';\nimport { con } from './utils';\nconst loadImage = window.loadImage;\n\nconst mapProb = prob => {\n  if (prob * 100 < 2) {\n    return '2%';\n  } else {\n    return prob * 100 + '%';\n  }\n};\n\nconst Predictions = ({\n  topK\n}) => {\n  return React.createElement(\"center\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, React.createElement(\"table\", {\n    className: \"predictions\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, React.createElement(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, React.createElement(\"th\", {\n    className: \"th\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, \"Prediction\"), React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, \"Calories you consumed\")), topK.map((pred, i) => React.createElement(\"tr\", {\n    key: i,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    className: \"predLabel\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, pred.name), React.createElement(\"td\", {\n    className: \"predPercent\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"predPercentLabel\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, con(pred.name)), React.createElement(\"div\", {\n    className: \"predBar\",\n    style: {\n      width: mapProb(pred.probability)\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  })))))));\n};\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.loadModel = () => {\n      console.log('Loading Model');\n      const model = new window.KerasJS.Model({\n        filepaths: {\n          model: 'model.json',\n          weights: 'https://s3.amazonaws.com/stratospark/food-101/model4b.10-0.68_weights.buf',\n          metadata: 'model4b.10-0.68_metadata.json'\n        },\n        gpu: this.state.hasWebgl,\n        layerCallPauses: true\n      });\n      let interval = setInterval(() => {\n        const percent = model.getLoadingProgress();\n        console.log('Progress', percent, model.xhrProgress);\n        this.setState({\n          loadingPercent: percent\n        });\n      }, 100);\n      const waitTillReady = model.ready();\n      waitTillReady.then(() => {\n        clearInterval(interval);\n        console.log('Model ready');\n        this.setState({\n          loadingPercent: 100,\n          modelLoading: false,\n          modelLoaded: true\n        });\n        setTimeout(() => this.loadImageToCanvas(), 100);\n      }).catch(err => {\n        clearInterval(interval);\n        console.log('err', err);\n      });\n      this.setState({\n        modelLoading: true,\n        model\n      });\n    };\n\n    this.loadImageToCanvas = () => {\n      console.log('Loading Image');\n      var file = document.getElementById('file');\n\n      if (!file) {\n        return;\n      }\n\n      ;\n      this.setState({\n        imageLoadingError: false,\n        imageLoading: true,\n        loadingPercent: 0,\n        classifyPercent: 0,\n        topK: null\n      });\n      file.onchange = e => {\n        var canvas = document.getElementById('input-canvas');\n        var context = canvas.getContext(\"2d\");\n        var img = new Image();\n        var files = evt.target.files; // FileList object\n\n        var f = files[0];\n\n        if (f.type.match('image.*')) {\n          var reader = new FileReader(); // Read in the image file as a data URL.\n\n          reader.readAsDataURL(f);\n\n          reader.onload = function (evt) {\n            if (evt.target.readyState == FileReader.DONE) {\n              img.src = evt.target.result;\n              context.drawImage(img, 100, 100);\n            }\n          };\n        } else {\n          alert(\"not an image\");\n        }\n      }, {\n        maxWidth: 299,\n        maxHeight: 299,\n        cover: true,\n        crop: true,\n        canvas: true,\n        crossOrigin: 'Anonymous'\n      };\n    };\n\n    this.runModel = () => {\n      console.log('Running Model');\n      const ctx = document.getElementById('input-canvas').getContext('2d');\n      const imageData = ctx.getImageData(0, 0, ctx.canvas.width, ctx.canvas.height);\n      const data = imageData.data,\n            width = imageData.width,\n            height = imageData.height; // data processing\n      // see https://github.com/fchollet/keras/blob/master/keras/applications/imagenet_utils.py\n      // and https://github.com/fchollet/keras/blob/master/keras/applications/inception_v3.py\n\n      let dataTensor = ndarray(new Float32Array(data), [width, height, 4]);\n      let dataProcessedTensor = ndarray(new Float32Array(width * height * 3), [width, height, 3]);\n      ops.divseq(dataTensor, 255);\n      ops.subseq(dataTensor, 0.5);\n      ops.mulseq(dataTensor, 2);\n      ops.assign(dataProcessedTensor.pick(null, null, 0), dataTensor.pick(null, null, 0));\n      ops.assign(dataProcessedTensor.pick(null, null, 1), dataTensor.pick(null, null, 1));\n      ops.assign(dataProcessedTensor.pick(null, null, 2), dataTensor.pick(null, null, 2));\n      const inputData = {\n        input_1: dataProcessedTensor.data\n      };\n      const predPromise = this.state.model.predict(inputData);\n      const totalLayers = Object.keys(this.state.model.modelDAG).length;\n      let interval = setInterval(() => {\n        const completedLayers = this.state.model.layersWithResults.length;\n        this.setState({\n          classifyPercent: (completedLayers / totalLayers * 100).toFixed(2)\n        });\n      }, 50);\n      predPromise.then(outputData => {\n        console.log(outputData);\n        clearInterval(interval);\n        const preds = outputData['dense_1'];\n        const topK = food101topK(preds, 1);\n        console.log(topK);\n        this.setState({\n          topK,\n          modelRunning: false\n        });\n      });\n    };\n\n    this.classifyNewImage = () => {\n      const newUrl = this.urlInput.value;\n      this.setState({\n        url: this.urlInput.value\n      });\n      console.log('classifying new image', newUrl);\n      this.loadImageToCanvas(newUrl);\n    };\n\n    let hasWebgl = false;\n\n    const _canvas = document.createElement('canvas');\n\n    const gl = _canvas.getContext('webgl') || _canvas.getContext('experimental-webgl'); // Report the result.\n\n\n    if (gl && gl instanceof WebGLRenderingContext) {\n      hasWebgl = true;\n    } else {\n      hasWebgl = false;\n    }\n\n    console.log('WebGL enabled:', hasWebgl);\n    this.urlInput = null;\n    this.state = {\n      model: null,\n      modelLoaded: false,\n      modelLoading: false,\n      modelRunning: false,\n      imageLoadingError: false,\n      loadingPercent: 0,\n      classifyPercent: 0,\n      topK: null,\n      hasWebgl\n    };\n  }\n\n  render() {\n    const _this$state = this.state,\n          loadingPercent = _this$state.loadingPercent,\n          modelLoaded = _this$state.modelLoaded,\n          modelLoading = _this$state.modelLoading,\n          modelRunning = _this$state.modelRunning,\n          imageLoading = _this$state.imageLoading,\n          imageLoadingError = _this$state.imageLoadingError,\n          classifyPercent = _this$state.classifyPercent,\n          topK = _this$state.topK;\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }, React.createElement(\"center\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }, \"Food Recognition with Calorie Estimation\")), !modelLoaded ? React.createElement(\"p\", {\n      className: \"intro\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    }, React.createElement(\"center\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }, \"To get started, click the Load Model button to load the model.\")) : '', React.createElement(\"div\", {\n      className: \"init\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }, !modelLoaded && !modelLoading ? React.createElement(\"center\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.loadModel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }, \"Load Model (85 MB)\")) : '', !modelLoaded && modelLoading ? React.createElement(\"p\", {\n      className: \"loading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    }, React.createElement(\"center\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    }, \"LOADING MODEL: \", loadingPercent, \"%\")) : '', modelLoaded && imageLoading ? React.createElement(\"p\", {\n      className: \"loading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    }, \"LOADING IMAGE\") : '', modelLoaded && imageLoadingError ? React.createElement(\"p\", {\n      className: \"error\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260\n      },\n      __self: this\n    }, React.createElement(\"center\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260\n      },\n      __self: this\n    }, \"ERROR LOADING IMAGE.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260\n      },\n      __self: this\n    }), \"TRY DIFFERENT URL\")) : '', modelLoaded && modelRunning ? React.createElement(\"p\", {\n      className: \"loading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263\n      },\n      __self: this\n    }, React.createElement(\"center\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263\n      },\n      __self: this\n    }, \"CLASSIFYING: \", classifyPercent, \"%\")) : ''), React.createElement(\"div\", {\n      className: \"interactive\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    }, modelLoaded && !modelRunning && !imageLoading ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268\n      },\n      __self: this\n    }, React.createElement(\"center\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }, \"Food Image URL: \", React.createElement(\"input\", {\n      type: \"file\",\n      id: \"file\",\n      ref: input => {\n        this.urlInput = input;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.classifyNewImage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271\n      },\n      __self: this\n    }, \"Classify Image\"))) : '', React.createElement(\"center\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274\n      },\n      __self: this\n    }, React.createElement(\"canvas\", {\n      id: \"input-canvas\",\n      width: \"299\",\n      height: \"299\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274\n      },\n      __self: this\n    })), topK ? React.createElement(Predictions, {\n      topK: topK,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275\n      },\n      __self: this\n    }) : ''));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/parth/Documents/Food-Detect/src/App.js"],"names":["React","Component","ndarray","ops","food101topK","con","loadImage","window","mapProb","prob","Predictions","topK","map","pred","i","name","width","probability","App","constructor","loadModel","console","log","model","KerasJS","Model","filepaths","weights","metadata","gpu","state","hasWebgl","layerCallPauses","interval","setInterval","percent","getLoadingProgress","xhrProgress","setState","loadingPercent","waitTillReady","ready","then","clearInterval","modelLoading","modelLoaded","setTimeout","loadImageToCanvas","catch","err","file","document","getElementById","imageLoadingError","imageLoading","classifyPercent","onchange","e","canvas","context","getContext","img","Image","files","evt","target","f","type","match","reader","FileReader","readAsDataURL","onload","readyState","DONE","src","result","drawImage","alert","maxWidth","maxHeight","cover","crop","crossOrigin","runModel","ctx","imageData","getImageData","height","data","dataTensor","Float32Array","dataProcessedTensor","divseq","subseq","mulseq","assign","pick","inputData","input_1","predPromise","predict","totalLayers","Object","keys","modelDAG","length","completedLayers","layersWithResults","toFixed","outputData","preds","modelRunning","classifyNewImage","newUrl","urlInput","value","url","createElement","gl","WebGLRenderingContext","render","input"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nimport ndarray from 'ndarray';\nimport ops from 'ndarray-ops';\n\nimport { food101topK } from './utils';\nimport { con } from './utils';\n\nconst loadImage = window.loadImage;\n\nconst mapProb = (prob) => {\n  if (prob * 100 < 2) {\n    return '2%';\n  } else {\n    return (prob * 100 + '%');\n  }\n}\n\nconst Predictions = ({topK}) => {\n  return (\n    <center><table className='predictions'>\n      <tbody>\n      <tr>\n        <th className='th'>Prediction</th>\n        <th>Calories you consumed</th>\n      </tr>\n      { topK.map((pred, i) =>\n        <tr key={i}>\n          <td className='predLabel'>{pred.name}</td>\n          <td className='predPercent'>\n            <span className='predPercentLabel'>{con(pred.name)}</span>\n            <div className='predBar' style={{width: mapProb(pred.probability)}}/>\n          </td>\n        </tr>\n      )}\n      </tbody>\n    </table></center>\n  );\n}\n\nclass App extends Component {\n\n  constructor() {\n    super();\n\n    let hasWebgl = false;\n    const canvas = document.createElement('canvas');\n    const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');\n    // Report the result.\n    if (gl && gl instanceof WebGLRenderingContext) {\n      hasWebgl = true;\n    } else {\n      hasWebgl = false;\n    }\n    console.log('WebGL enabled:', hasWebgl);\n\n    this.urlInput = null;\n    this.state = {\n      model: null,\n      modelLoaded: false,\n      modelLoading: false,\n      modelRunning: false,\n      imageLoadingError: false,\n      loadingPercent: 0,\n      classifyPercent: 0,\n      topK: null,\n      hasWebgl\n    };\n  }\n\n  loadModel = () => {\n    console.log('Loading Model');\n    const model = new window.KerasJS.Model({\n      filepaths: {\n        model: 'model.json' ,\n        weights: 'https://s3.amazonaws.com/stratospark/food-101/model4b.10-0.68_weights.buf',\n        metadata: 'model4b.10-0.68_metadata.json'\n      },\n      gpu: this.state.hasWebgl,\n      layerCallPauses: true\n    });\n\n    let interval = setInterval(() => {\n      const percent = model.getLoadingProgress();\n      console.log('Progress', percent, model.xhrProgress);\n      this.setState({\n        loadingPercent: percent\n      });\n    }, 100);\n\n    const waitTillReady = model.ready();\n\n    waitTillReady.then(() => {\n      clearInterval(interval);\n      console.log('Model ready');\n      this.setState({\n        loadingPercent: 100,\n        modelLoading: false,\n        modelLoaded: true\n      });\n\n      setTimeout(() => this.loadImageToCanvas(), 100);\n    })\n    .catch(err => {\n      clearInterval(interval);\n      console.log('err', err);\n    });\n\n    this.setState({\n      modelLoading: true,\n      model\n    });\n  }\n\n  loadImageToCanvas = () => {\n    console.log('Loading Image');\n    var file = document.getElementById('file')\n    if (!file) {\n      return;\n    };\n\n    this.setState({\n      imageLoadingError: false,\n      imageLoading: true,\n      loadingPercent: 0,\n      classifyPercent: 0,\n      topK: null\n    });\n\n    file.onchange = (e) => {\n\tvar canvas = document.getElementById('input-canvas');\n\tvar context = canvas.getContext(\"2d\");  \n\tvar img = new Image();\n\tvar files = evt.target.files; // FileList object\n\tvar f = files[0];\n\tif(f.type.match('image.*')) {\n\t        var reader = new FileReader();\n\t        // Read in the image file as a data URL.\n\t        reader.readAsDataURL(f);\n\t    \treader.onload = function(evt){\n\t    \t\tif( evt.target.readyState == FileReader.DONE) {\n\t    \t\t\timg.src = evt.target.result;\n\t\t\t\tcontext.drawImage(img,100,100);\n\t\t\t}\n\t    \t}    \n\n\t    } else {\n\t        alert(\"not an image\");\n\t    }\n\t},\n      {\n        maxWidth: 299,\n        maxHeight: 299,\n        cover: true,\n        crop: true,\n        canvas: true,\n        crossOrigin: 'Anonymous'\n      }\n  }\n\n  runModel = () => {\n    console.log('Running Model');\n\n    const ctx = document.getElementById('input-canvas').getContext('2d');\n    const imageData = ctx.getImageData(\n      0,\n      0,\n      ctx.canvas.width,\n      ctx.canvas.height\n    );\n    const { data, width, height } = imageData;\n\n    // data processing\n    // see https://github.com/fchollet/keras/blob/master/keras/applications/imagenet_utils.py\n    // and https://github.com/fchollet/keras/blob/master/keras/applications/inception_v3.py\n    let dataTensor = ndarray(new Float32Array(data), [ width, height, 4 ]);\n    let dataProcessedTensor = ndarray(new Float32Array(width * height * 3), [\n      width,\n      height,\n      3\n    ]);\n    ops.divseq(dataTensor, 255);\n    ops.subseq(dataTensor, 0.5);\n    ops.mulseq(dataTensor, 2);\n    ops.assign(\n      dataProcessedTensor.pick(null, null, 0),\n      dataTensor.pick(null, null, 0)\n    );\n    ops.assign(\n      dataProcessedTensor.pick(null, null, 1),\n      dataTensor.pick(null, null, 1)\n    );\n    ops.assign(\n      dataProcessedTensor.pick(null, null, 2),\n      dataTensor.pick(null, null, 2)\n    );\n\n    const inputData = { input_1: dataProcessedTensor.data };\n    const predPromise = this.state.model.predict(inputData);\n\n    const totalLayers = Object.keys(this.state.model.modelDAG).length\n    let interval = setInterval(() => {\n      const completedLayers = this.state.model.layersWithResults.length;\n      this.setState({\n        classifyPercent: ((completedLayers / totalLayers) * 100).toFixed(2)\n      });\n    }, 50);\n\n    predPromise.then(outputData => {\n      console.log(outputData);\n      clearInterval(interval);\n      const preds = outputData['dense_1'];\n      const topK = food101topK(preds,1);\n      console.log(topK);\n      this.setState({\n        topK,\n        modelRunning: false\n      });\n    });\n  }\n\n  classifyNewImage = () => {\n    const newUrl = this.urlInput.value;\n    this.setState({\n      url: this.urlInput.value\n    });\n    console.log('classifying new image', newUrl);\n    this.loadImageToCanvas(newUrl);\n  }\n\n  render() {\n    const {\n      loadingPercent,\n      modelLoaded,\n      modelLoading,\n      modelRunning,\n      imageLoading,\n      imageLoadingError,\n      classifyPercent,\n      topK\n    } = this.state;\n    return (\n      <div className=\"App\">\n        <center><h1>Food Recognition with Calorie Estimation</h1></center>\n        { !modelLoaded ?\n        <p className='intro'>\n          <center>To get started, click the Load Model button to load the model.</center>\n        </p>\n        : ''}\n        <div className='init'>\n        { !modelLoaded && !modelLoading ? <center><button onClick={this.loadModel}>Load Model (85 MB)</button></center> : ''}\n        { !modelLoaded && modelLoading ?\n          <p className='loading'><center>LOADING MODEL: {loadingPercent}%</center></p>\n          : ''}\n        { modelLoaded && imageLoading ?\n          <p className='loading'>LOADING IMAGE</p>\n          : ''}\n        { modelLoaded && imageLoadingError ?\n          <p className='error'><center>ERROR LOADING IMAGE.<br/>TRY DIFFERENT URL</center></p>\n          : ''}\n        { modelLoaded && modelRunning ?\n          <p className='loading'><center>CLASSIFYING: {classifyPercent}%</center></p>\n          : ''}\n        </div>\n        <div className='interactive'>\n          { modelLoaded && !modelRunning && !imageLoading ?\n          <p>\n            <center>Food Image URL: <input type='file' id='file' ref={(input) => { this.urlInput = input; }}/>\n            <br/><br/>\n            <button onClick={this.classifyNewImage}>Classify Image</button></center>\n          </p>\n          : '' }\n          <center><canvas id='input-canvas' width='299' height='299'/></center>\n          { topK ? <Predictions topK={topK}/> : ''}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}