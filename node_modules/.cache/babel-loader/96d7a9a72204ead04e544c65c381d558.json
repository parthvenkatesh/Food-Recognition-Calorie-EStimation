{"ast":null,"code":"var _jsxFileName = \"/home/parth/Documents/mini/Food-Detect/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport ndarray from 'ndarray';\nimport ops from 'ndarray-ops';\nimport { food101topK } from './utils';\nimport { con } from './utils';\nconst loadImage = window.loadImage;\n\nconst mapProb = prob => {\n  if (prob * 100 < 2) {\n    return '2%';\n  } else {\n    return prob * 100 + '%';\n  }\n};\n\nconst Predictions = ({\n  topK\n}) => {\n  return React.createElement(\"table\", {\n    className: \"predictions\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, React.createElement(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, React.createElement(\"th\", {\n    className: \"th\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, \"Prediction\"), React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, \"Probability\")), topK.map((pred, i) => React.createElement(\"tr\", {\n    key: i,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    className: \"predLabel\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, pred.name), React.createElement(\"td\", {\n    className: \"predPercent\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"predPercentLabel\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, con(pred.name), \"%\"), React.createElement(\"div\", {\n    className: \"predBar\",\n    style: {\n      width: mapProb(pred.probability)\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }))))));\n};\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.loadModel = () => {\n      console.log('Loading Model');\n      const model = new window.KerasJS.Model({\n        filepaths: {\n          model: 'model.json',\n          weights: 'https://s3.amazonaws.com/stratospark/food-101/model4b.10-0.68_weights.buf',\n          metadata: 'model4b.10-0.68_metadata.json'\n        },\n        gpu: this.state.hasWebgl,\n        layerCallPauses: true\n      });\n      let interval = setInterval(() => {\n        const percent = model.getLoadingProgress();\n        console.log('Progress', percent, model.xhrProgress);\n        this.setState({\n          loadingPercent: percent\n        });\n      }, 100);\n      const waitTillReady = model.ready();\n      waitTillReady.then(() => {\n        clearInterval(interval);\n        console.log('Model ready');\n        this.setState({\n          loadingPercent: 100,\n          modelLoading: false,\n          modelLoaded: true\n        });\n        setTimeout(() => this.loadImageToCanvas(this.state.url), 100);\n      }).catch(err => {\n        clearInterval(interval);\n        console.log('err', err);\n      });\n      this.setState({\n        modelLoading: true,\n        model\n      });\n    };\n\n    this.loadImageToCanvas = url => {\n      console.log('Loading Image');\n\n      if (!url) {\n        return;\n      }\n\n      ;\n      this.setState({\n        imageLoadingError: false,\n        imageLoading: true,\n        loadingPercent: 0,\n        classifyPercent: 0,\n        topK: null\n      });\n      loadImage(url, img => {\n        if (img.type === 'error') {\n          alert(\"Access to image at this URL is denied.\");\n          console.log('Error loading image');\n          this.setState({\n            imageLoadingError: true,\n            imageLoading: false,\n            modelRunning: false,\n            url: null\n          });\n        } else {\n          console.log('Image Loaded');\n          const ctx = document.getElementById('input-canvas').getContext('2d');\n          ctx.drawImage(img, 0, 0);\n          this.setState({\n            imageLoadingError: false,\n            imageLoading: false,\n            modelRunning: true\n          });\n          setTimeout(() => {\n            this.runModel();\n          }, 1000);\n        }\n      }, {\n        maxWidth: 299,\n        maxHeight: 299,\n        cover: true,\n        crop: true,\n        canvas: true,\n        crossOrigin: 'Anonymous'\n      });\n    };\n\n    this.runModel = () => {\n      console.log('Running Model');\n      const ctx = document.getElementById('input-canvas').getContext('2d');\n      const imageData = ctx.getImageData(0, 0, ctx.canvas.width, ctx.canvas.height);\n      const data = imageData.data,\n            width = imageData.width,\n            height = imageData.height; // data processing\n      // see https://github.com/fchollet/keras/blob/master/keras/applications/imagenet_utils.py\n      // and https://github.com/fchollet/keras/blob/master/keras/applications/inception_v3.py\n\n      let dataTensor = ndarray(new Float32Array(data), [width, height, 4]);\n      let dataProcessedTensor = ndarray(new Float32Array(width * height * 3), [width, height, 3]);\n      ops.divseq(dataTensor, 255);\n      ops.subseq(dataTensor, 0.5);\n      ops.mulseq(dataTensor, 2);\n      ops.assign(dataProcessedTensor.pick(null, null, 0), dataTensor.pick(null, null, 0));\n      ops.assign(dataProcessedTensor.pick(null, null, 1), dataTensor.pick(null, null, 1));\n      ops.assign(dataProcessedTensor.pick(null, null, 2), dataTensor.pick(null, null, 2));\n      const inputData = {\n        input_1: dataProcessedTensor.data\n      };\n      const predPromise = this.state.model.predict(inputData);\n      const totalLayers = Object.keys(this.state.model.modelDAG).length;\n      let interval = setInterval(() => {\n        const completedLayers = this.state.model.layersWithResults.length;\n        this.setState({\n          classifyPercent: (completedLayers / totalLayers * 100).toFixed(2)\n        });\n      }, 50);\n      predPromise.then(outputData => {\n        console.log(outputData);\n        clearInterval(interval);\n        const preds = outputData['dense_1'];\n        const topK = food101topK(preds, 1);\n        console.log(topK);\n        this.setState({\n          topK,\n          modelRunning: false\n        });\n      });\n    };\n\n    this.classifyNewImage = () => {\n      const newUrl = this.urlInput.value;\n      this.setState({\n        url: this.urlInput.value\n      });\n      console.log('classifying new image', newUrl);\n      this.loadImageToCanvas(newUrl);\n    };\n\n    let hasWebgl = false;\n    const canvas = document.createElement('canvas');\n    const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl'); // Report the result.\n\n    if (gl && gl instanceof WebGLRenderingContext) {\n      hasWebgl = true;\n    } else {\n      hasWebgl = false;\n    }\n\n    console.log('WebGL enabled:', hasWebgl);\n    this.urlInput = null;\n    this.state = {\n      model: null,\n      modelLoaded: false,\n      modelLoading: false,\n      modelRunning: false,\n      imageLoadingError: false,\n      loadingPercent: 0,\n      classifyPercent: 0,\n      topK: null,\n      hasWebgl,\n      url: 'https://images.unsplash.com/photo-1534308983496-4fabb1a015ee?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&w=1000&q=80'\n    };\n  }\n\n  render() {\n    const _this$state = this.state,\n          loadingPercent = _this$state.loadingPercent,\n          modelLoaded = _this$state.modelLoaded,\n          modelLoading = _this$state.modelLoading,\n          modelRunning = _this$state.modelRunning,\n          imageLoading = _this$state.imageLoading,\n          imageLoadingError = _this$state.imageLoadingError,\n          classifyPercent = _this$state.classifyPercent,\n          topK = _this$state.topK;\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }, \"Food Classification Demo with Keras.js!\"), !modelLoaded ? React.createElement(\"p\", {\n      className: \"intro\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    }, \"To get started, click the Load Model button to download the model that we have built and exported using the Python notebook. The file may be fairly large for some (85 MB), so keep that in mind if progress seems stuck.\") : '', React.createElement(\"div\", {\n      className: \"init\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260\n      },\n      __self: this\n    }, !modelLoaded && !modelLoading ? React.createElement(\"button\", {\n      onClick: this.loadModel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }, \"Load Model (85 MB)\") : '', !modelLoaded && modelLoading ? React.createElement(\"p\", {\n      className: \"loading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263\n      },\n      __self: this\n    }, \"LOADING MODEL: \", loadingPercent, \"%\") : '', modelLoaded && imageLoading ? React.createElement(\"p\", {\n      className: \"loading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    }, \"LOADING IMAGE\") : '', modelLoaded && imageLoadingError ? React.createElement(\"p\", {\n      className: \"error\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }, \"ERROR LOADING IMAGE.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }), \"TRY DIFFERENT URL\") : '', modelLoaded && modelRunning ? React.createElement(\"p\", {\n      className: \"loading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272\n      },\n      __self: this\n    }, \"CLASSIFYING: \", classifyPercent, \"%\") : ''), React.createElement(\"div\", {\n      className: \"interactive\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275\n      },\n      __self: this\n    }, modelLoaded && !modelRunning && !imageLoading ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277\n      },\n      __self: this\n    }, \"Food Image URL: \", React.createElement(\"input\", {\n      type: \"text\",\n      ref: input => {\n        this.urlInput = input;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.classifyNewImage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280\n      },\n      __self: this\n    }, \"Classify Image\")) : '', React.createElement(\"canvas\", {\n      id: \"input-canvas\",\n      width: \"299\",\n      height: \"299\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283\n      },\n      __self: this\n    }), topK ? React.createElement(Predictions, {\n      topK: topK,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284\n      },\n      __self: this\n    }) : ''));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/parth/Documents/mini/Food-Detect/src/App.js"],"names":["React","Component","ndarray","ops","food101topK","con","loadImage","window","mapProb","prob","Predictions","topK","map","pred","i","name","width","probability","App","constructor","loadModel","console","log","model","KerasJS","Model","filepaths","weights","metadata","gpu","state","hasWebgl","layerCallPauses","interval","setInterval","percent","getLoadingProgress","xhrProgress","setState","loadingPercent","waitTillReady","ready","then","clearInterval","modelLoading","modelLoaded","setTimeout","loadImageToCanvas","url","catch","err","imageLoadingError","imageLoading","classifyPercent","img","type","alert","modelRunning","ctx","document","getElementById","getContext","drawImage","runModel","maxWidth","maxHeight","cover","crop","canvas","crossOrigin","imageData","getImageData","height","data","dataTensor","Float32Array","dataProcessedTensor","divseq","subseq","mulseq","assign","pick","inputData","input_1","predPromise","predict","totalLayers","Object","keys","modelDAG","length","completedLayers","layersWithResults","toFixed","outputData","preds","classifyNewImage","newUrl","urlInput","value","createElement","gl","WebGLRenderingContext","render","input"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nimport ndarray from 'ndarray';\nimport ops from 'ndarray-ops';\n\nimport { food101topK } from './utils';\nimport { con } from './utils';\n\nconst loadImage = window.loadImage;\n\nconst mapProb = (prob) => {\n  if (prob * 100 < 2) {\n    return '2%';\n  } else {\n    return (prob * 100 + '%');\n  }\n}\n\nconst Predictions = ({topK}) => {\n  return (\n    <table className='predictions'>\n      <tbody>\n      <tr>\n        <th className='th'>Prediction</th>\n        <th>Probability</th>\n      </tr>\n      { topK.map((pred, i) =>\n        <tr key={i}>\n          <td className='predLabel'>{pred.name}</td>\n          <td className='predPercent'>\n            <span className='predPercentLabel'>{con(pred.name)}%</span>\n            <div className='predBar' style={{width: mapProb(pred.probability)}}/>\n          </td>\n        </tr>\n      )}\n      </tbody>\n    </table>\n  );\n}\n\nclass App extends Component {\n\n  constructor() {\n    super();\n\n    let hasWebgl = false;\n    const canvas = document.createElement('canvas');\n    const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');\n    // Report the result.\n    if (gl && gl instanceof WebGLRenderingContext) {\n      hasWebgl = true;\n    } else {\n      hasWebgl = false;\n    }\n    console.log('WebGL enabled:', hasWebgl);\n\n    this.urlInput = null;\n    this.state = {\n      model: null,\n      modelLoaded: false,\n      modelLoading: false,\n      modelRunning: false,\n      imageLoadingError: false,\n      loadingPercent: 0,\n      classifyPercent: 0,\n      topK: null,\n      hasWebgl,\n      url: 'https://images.unsplash.com/photo-1534308983496-4fabb1a015ee?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&w=1000&q=80'\n    };\n  }\n\n  loadModel = () => {\n    console.log('Loading Model');\n    const model = new window.KerasJS.Model({\n      filepaths: {\n        model: 'model.json' ,\n        weights: 'https://s3.amazonaws.com/stratospark/food-101/model4b.10-0.68_weights.buf',\n        metadata: 'model4b.10-0.68_metadata.json'\n      },\n      gpu: this.state.hasWebgl,\n      layerCallPauses: true\n    });\n\n    let interval = setInterval(() => {\n      const percent = model.getLoadingProgress();\n      console.log('Progress', percent, model.xhrProgress);\n      this.setState({\n        loadingPercent: percent\n      });\n    }, 100);\n\n    const waitTillReady = model.ready();\n\n    waitTillReady.then(() => {\n      clearInterval(interval);\n      console.log('Model ready');\n      this.setState({\n        loadingPercent: 100,\n        modelLoading: false,\n        modelLoaded: true\n      });\n\n      setTimeout(() => this.loadImageToCanvas(this.state.url), 100);\n    })\n    .catch(err => {\n      clearInterval(interval);\n      console.log('err', err);\n    });\n\n    this.setState({\n      modelLoading: true,\n      model\n    });\n  }\n\n  loadImageToCanvas = (url) => {\n    console.log('Loading Image');\n    if (!url) {\n      return;\n    };\n\n    this.setState({\n      imageLoadingError: false,\n      imageLoading: true,\n      loadingPercent: 0,\n      classifyPercent: 0,\n      topK: null\n    });\n\n    loadImage(\n      url,\n      img => {\n        if (img.type === 'error') {\n\t  alert(\"Access to image at this URL is denied.\");\n          console.log('Error loading image');\n          this.setState({\n            imageLoadingError: true,\n            imageLoading: false,\n            modelRunning: false,\n            url: null\n          });\n\n        } else {\n          console.log('Image Loaded');\n          const ctx = document.getElementById('input-canvas').getContext('2d');\n          ctx.drawImage(img, 0, 0);\n          this.setState({\n            imageLoadingError: false,\n            imageLoading: false,\n            modelRunning: true\n          });\n          setTimeout(() => {\n            this.runModel();\n          }, 1000)\n        }\n      },\n      {\n        maxWidth: 299,\n        maxHeight: 299,\n        cover: true,\n        crop: true,\n        canvas: true,\n        crossOrigin: 'Anonymous'\n      }\n    );\n  }\n\n  runModel = () => {\n    console.log('Running Model');\n\n    const ctx = document.getElementById('input-canvas').getContext('2d');\n    const imageData = ctx.getImageData(\n      0,\n      0,\n      ctx.canvas.width,\n      ctx.canvas.height\n    );\n    const { data, width, height } = imageData;\n\n    // data processing\n    // see https://github.com/fchollet/keras/blob/master/keras/applications/imagenet_utils.py\n    // and https://github.com/fchollet/keras/blob/master/keras/applications/inception_v3.py\n    let dataTensor = ndarray(new Float32Array(data), [ width, height, 4 ]);\n    let dataProcessedTensor = ndarray(new Float32Array(width * height * 3), [\n      width,\n      height,\n      3\n    ]);\n    ops.divseq(dataTensor, 255);\n    ops.subseq(dataTensor, 0.5);\n    ops.mulseq(dataTensor, 2);\n    ops.assign(\n      dataProcessedTensor.pick(null, null, 0),\n      dataTensor.pick(null, null, 0)\n    );\n    ops.assign(\n      dataProcessedTensor.pick(null, null, 1),\n      dataTensor.pick(null, null, 1)\n    );\n    ops.assign(\n      dataProcessedTensor.pick(null, null, 2),\n      dataTensor.pick(null, null, 2)\n    );\n\n    const inputData = { input_1: dataProcessedTensor.data };\n    const predPromise = this.state.model.predict(inputData);\n\n    const totalLayers = Object.keys(this.state.model.modelDAG).length\n    let interval = setInterval(() => {\n      const completedLayers = this.state.model.layersWithResults.length;\n      this.setState({\n        classifyPercent: ((completedLayers / totalLayers) * 100).toFixed(2)\n      });\n    }, 50);\n\n    predPromise.then(outputData => {\n      console.log(outputData);\n      clearInterval(interval);\n      const preds = outputData['dense_1'];\n      const topK = food101topK(preds,1);\n      console.log(topK);\n      this.setState({\n        topK,\n        modelRunning: false\n      });\n    });\n  }\n\n  classifyNewImage = () => {\n    const newUrl = this.urlInput.value;\n    this.setState({\n      url: this.urlInput.value\n    });\n    console.log('classifying new image', newUrl);\n    this.loadImageToCanvas(newUrl);\n  }\n\n  render() {\n    const {\n      loadingPercent,\n      modelLoaded,\n      modelLoading,\n      modelRunning,\n      imageLoading,\n      imageLoadingError,\n      classifyPercent,\n      topK\n    } = this.state;\n    return (\n      <div className=\"App\">\n        <h1>Food Classification Demo with Keras.js!</h1>\n        { !modelLoaded ?\n        <p className='intro'>\n          To get started, click the Load Model button to download the model that\n          we have built and exported using the Python notebook. The file may be\n          fairly large for some (85 MB), so keep that in mind if progress seems stuck.\n        </p>\n        : ''}\n        <div className='init'>\n        { !modelLoaded && !modelLoading ? <button onClick={this.loadModel}>Load Model (85 MB)</button> : ''}\n        { !modelLoaded && modelLoading ?\n          <p className='loading'>LOADING MODEL: {loadingPercent}%</p>\n          : ''}\n        { modelLoaded && imageLoading ?\n          <p className='loading'>LOADING IMAGE</p>\n          : ''}\n        { modelLoaded && imageLoadingError ?\n          <p className='error'>ERROR LOADING IMAGE.<br/>TRY DIFFERENT URL</p>\n          : ''}\n        { modelLoaded && modelRunning ?\n          <p className='loading'>CLASSIFYING: {classifyPercent}%</p>\n          : ''}\n        </div>\n        <div className='interactive'>\n          { modelLoaded && !modelRunning && !imageLoading ?\n          <p>\n            Food Image URL: <input type='text' ref={(input) => { this.urlInput = input; }}/>\n            <br/><br/>\n            <button onClick={this.classifyNewImage}>Classify Image</button>\n          </p>\n          : '' }\n          <canvas id='input-canvas' width='299' height='299'/>\n          { topK ? <Predictions topK={topK}/> : ''}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}