{"ast":null,"code":"import isTypedArray from 'lodash/isTypedArray';\nimport reverse from 'lodash/reverse';\nimport sortBy from 'lodash/sortBy';\nimport take from 'lodash/take';\nimport { food101Classes } from './food101';\nimport Papa from 'papaparse';\nexport function food101topK(classProbabilities, k = 5) {\n  const probs = isTypedArray(classProbabilities) ? Array.prototype.slice.call(classProbabilities) : classProbabilities;\n  const sorted = reverse(sortBy(probs.map((prob, index) => [prob, index]), probIndex => probIndex[0]));\n  const topK = take(sorted, k).map(probIndex => {\n    const iClass = food101Classes[probIndex[1]];\n    return {\n      id: probIndex[1],\n      name: iClass.replace(/_/, ' '),\n      probability: probIndex[0]\n    };\n  });\n  return topK;\n}\n;\nexport function con(val) {\n  Papa.parse('/home/names.csv', {\n    header: true,\n    download: true,\n    dynamicTyping: true,\n    complete: function (results) {\n      console.log(results);\n    }\n  });\n\n  const fs = require('fs');\n\n  const papa = require('papaparse');\n\n  const file = fs.createReadStream('/home/names.csv');\n  console.log(val);\n  return val;\n}","map":{"version":3,"sources":["/home/parth/Documents/mini/Food-Detect/src/utils.js"],"names":["isTypedArray","reverse","sortBy","take","food101Classes","Papa","food101topK","classProbabilities","k","probs","Array","prototype","slice","call","sorted","map","prob","index","probIndex","topK","iClass","id","name","replace","probability","con","val","parse","header","download","dynamicTyping","complete","results","console","log","fs","require","papa","file","createReadStream"],"mappings":"AACA,OAAOA,YAAP,MAAyB,qBAAzB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,OAAOC,MAAP,MAAmB,eAAnB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,SAASC,cAAT,QAA+B,WAA/B;AACA,OAAOC,IAAP,MAAiB,WAAjB;AAEA,OAAO,SAASC,WAAT,CAAqBC,kBAArB,EAAyCC,CAAC,GAAG,CAA7C,EAAgD;AACrD,QAAMC,KAAK,GAAGT,YAAY,CAACO,kBAAD,CAAZ,GACVG,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BN,kBAA3B,CADU,GAEVA,kBAFJ;AAIA,QAAMO,MAAM,GAAGb,OAAO,CACpBC,MAAM,CACJO,KAAK,CAACM,GAAN,CAAU,CAACC,IAAD,EAAOC,KAAP,KAAiB,CAAED,IAAF,EAAQC,KAAR,CAA3B,CADI,EAEJC,SAAS,IAAIA,SAAS,CAAC,CAAD,CAFlB,CADc,CAAtB;AAOA,QAAMC,IAAI,GAAGhB,IAAI,CAACW,MAAD,EAASN,CAAT,CAAJ,CAAgBO,GAAhB,CAAoBG,SAAS,IAAI;AAC5C,UAAME,MAAM,GAAGhB,cAAc,CAACc,SAAS,CAAC,CAAD,CAAV,CAA7B;AACA,WAAO;AACLG,MAAAA,EAAE,EAAEH,SAAS,CAAC,CAAD,CADR;AAELI,MAAAA,IAAI,EAAEF,MAAM,CAACG,OAAP,CAAe,GAAf,EAAoB,GAApB,CAFD;AAGLC,MAAAA,WAAW,EAAEN,SAAS,CAAC,CAAD;AAHjB,KAAP;AAKD,GAPY,CAAb;AAQA,SAAOC,IAAP;AACD;AAAA;AAED,OAAO,SAASM,GAAT,CAAaC,GAAb,EAAiB;AACvBrB,EAAAA,IAAI,CAACsB,KAAL,CAAW,iBAAX,EAA8B;AAC5BC,IAAAA,MAAM,EAAE,IADoB;AAE5BC,IAAAA,QAAQ,EAAE,IAFkB;AAG5BC,IAAAA,aAAa,EAAE,IAHa;AAI5BC,IAAAA,QAAQ,EAAE,UAASC,OAAT,EAAkB;AAC1BC,MAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACH;AAN6B,GAA9B;;AAQA,QAAMG,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,QAAMC,IAAI,GAAGD,OAAO,CAAC,WAAD,CAApB;;AACA,QAAME,IAAI,GAAGH,EAAE,CAACI,gBAAH,CAAoB,iBAApB,CAAb;AACAN,EAAAA,OAAO,CAACC,GAAR,CAAYR,GAAZ;AACA,SAAOA,GAAP;AACA","sourcesContent":["\nimport isTypedArray from 'lodash/isTypedArray';\nimport reverse from 'lodash/reverse';\nimport sortBy from 'lodash/sortBy';\nimport take from 'lodash/take';\nimport { food101Classes } from './food101';\nimport Papa from 'papaparse';\n\nexport function food101topK(classProbabilities, k = 5) {\n  const probs = isTypedArray(classProbabilities)\n    ? Array.prototype.slice.call(classProbabilities)\n    : classProbabilities;\n\n  const sorted = reverse(\n    sortBy(\n      probs.map((prob, index) => [ prob, index ]),\n      probIndex => probIndex[0]\n    )\n  );\n\n  const topK = take(sorted, k).map(probIndex => {\n    const iClass = food101Classes[probIndex[1]];\n    return {\n      id: probIndex[1],\n      name: iClass.replace(/_/, ' '),\n      probability: probIndex[0]\n    };\n  });\n  return topK;\n};\n\nexport function con(val){\n\tPapa.parse('/home/names.csv', {\n  \theader: true,\n  \tdownload: true,\n  \tdynamicTyping: true,\n  \tcomplete: function(results) {\n    \tconsole.log(results);\n\t}\n\t});\t\n\tconst fs = require('fs');\n\tconst papa = require('papaparse');\n\tconst file = fs.createReadStream('/home/names.csv');\n\tconsole.log(val);\n\treturn val;\n}\n"]},"metadata":{},"sourceType":"module"}